# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0
metadata:
  template_name: Generic cloud provider implementations
  template_author: onecommons.org
  template_version: 1.0.0

relationship_types:
  unfurl.relationships.ConfiguredBy:
    derived_from: tosca.relationships.Root
    valid_target_types: [unfurl.capabilities.Configuration]

capability_types:
  unfurl.capabilities.Configuration:
    derived_from: tosca.capabilities.Root

node_types:
  unfurl.nodes.Configuration:
    derived_from: tosca.nodes.Root
    capabilities:
      configuredBy:
        type: unfurl.capabilities.Configuration

  unfurl.nodes.ComputeAbstract:
    derived_from: tosca.nodes.Compute
    properties:
      bootimage:
        type: string
        default:
          eval: .requirements::configuredBy::bootimage
      user_data:
        type: string
        default:
          eval: .requirements::configuredBy::user_data
      portspec:
        type: tosca.datatypes.network.PortSpec
        default:
          eval: .requirements::configuredBy::portspec
      # name, zone, machine_type, tags, network
    requirements:
      - configuredBy:
          relationship: unfurl.relationships.ConfiguredBy
          node: unfurl.nodes.Configuration
          occurrences: [0, UNBOUNDED]

  unfurl.nodes.DockerHost:
    derived_from: unfurl.nodes.Configuration
    properties:
      portspec:
        type: tosca.datatypes.network.PortSpec
      container:
        type: string
        required: false
      dockercompose:
        type: string
        required: false
      env:
        type: map
        entry_schema:
          type: string
        default: {}

  unfurl.nodes.BootImageAbstract:
    derived_from: unfurl.nodes.Configuration
    attributes:
      bootimage:
        type: string

  unfurl.nodes.DockerComputeHost:
    derived_from: unfurl.nodes.DockerHost
    description: Given a docker-compose.yaml file create a cloudinit file
    properties:
      bootimage:
        type: string
        default:
          eval: ::dockerhost-bootimage::bootimage
      machine_type:
        default:
          eval: ::dockerhost-bootimage::machine_type
    attributes:
      cloudinit:
        type: string
    interfaces:
      Standard:
        operations:
          configure:
            implementation: Terraform
            inputs:
              resultTemplate:
                attributes:
                  userdata: "{{ outputs.cloud_config }}"
              main:
                eval:
                  template: |
                    environment = merge({
                        COMPOSE_DOCKER_IMAGE       = var.docker_compose_image
                        COMPOSE_DOCKER_TAG         = var.docker_compose_tag
                      }, var.env)
                    }

                    locals {
                      file_regex   = "(?P<filename>docker-compose(?:\\.(?P<name>.*?))?\\.ya?ml)"
                      files = concat(
                        [
                          {
                            filename = ".env"
                            content  = base64encode(join("\n", [for k, v in local.environment : "${k}=${v}" if v != null]))
                          }
                        ],
                        var.files
                      )

                      # From the list above, identify all docker-compose*.yaml files.
                      # This list will be used to generate separate systemd unit files for each service.
                      docker_compose_files = [
                        for f in local.files : merge(regex(local.file_regex, f.filename), f)
                        if can(regex(local.file_regex, f.filename))
                      ]
                    }

                    // Generate cloud-init config

                    data "cloudinit_config" "config" {
                      gzip          = false
                      base64_encode = false

                      part {
                        filename     = "cloud-init.yaml"
                        merge_type   = "list(append)+dict(no_replace,recurse_list)+str()"
                        content_type = "text/cloud-config"
                        content = templatefile("{{ cloud-config.yaml | abspath('src') }}", {
                          files                = local.files
                          docker_compose_files = local.docker_compose_files
                        })
                      }

                      # Add any additional cloud-init configuration or scripts provided by the user
                      dynamic "part" {
                        for_each = var.cloudinit_part
                        content {
                          merge_type   = "list(append)+dict(no_replace,recurse_list)+str()"
                          content_type = part.value.content_type
                          content      = part.value.content
                        }
                      }
                    }

                    output "cloud_config" {
                      value = module.container-server.cloud_config
                    }

                    variable "env" {
                      description = "List of environment variables (KEY=VAL) to be made available within the application container and also Docker Compose (useful for overriding configuration options)."
                      type        = map(string)
                      default     = {}
                    }

                    variable "files" {
                      description = "User files to be copied to the application's working directory (`/var/app`). The file's content must be provided to Terraform as a base64 encoded string."
                      type        = list(object({ filename : string, content : string }))
                      default     = []
                    }

                    variable "cloudinit_part" {
                      description = "Additional cloud-init configuration used to setup and/or customise the instance beyond the defaults provided by this module."
                      type        = list(object({ content_type : string, content : string }))
                      default     = []
                    }

                    variable "docker_compose_image" {
                      description = "Docker image used to run Docker Compose commands. (default: docker/compose)"
                      type        = string
                      default     = "docker/compose"
                    }

                    variable "docker_compose_tag" {
                      description = "Tagged version of Docker Compose to use. (default: latest)"
                      type        = string
                      default     = "latest"
                    }

# XXX use this for ssh endpoints and storage
# annotations:
#     unfurl:ComputeAbstract[configuredBy]:
#       capabilities:
#         endpoint:
#           port:
#             eval: .requirements::configuredBy::portspec::source
#           protocol:
#             eval: .requirements::configuredBy::portspec::protocol
